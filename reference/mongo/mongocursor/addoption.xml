<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 61fa6fb09233679bec09c7641a2a271d9508427c Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocursor.addoption" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::addOption</refname>
  <refpurpose>Ajoute une paire clé/valeur de haut niveau à la requête</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCursor::addOption</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cette méthode est une méthode avancée et ne devrait pas être utilisée
   sans vraiment savoir ce que vous en faîtes.
  </para>
  <para>
   Une requête peut optionnellement être imbriquée dans un champ "query"
   si les autres options, comme un tri ou un indice sont fournies. Actuellement,
   l'ajout d'un tri fait que la requête devient un sous-champ d'un objet
   requête plus gros, comme ceci :
   <programlisting role="php">
<![CDATA[
<?php

$query = array("query" => $query, "orderby" => $sort);

?>
]]>
   </programlisting>
  </para>
  <para>
   Cette méthode permet d'ajouter un champ de haut niveau à une requête.
   Elle rend une requête un sous-objet (si elle ne l'est pas déjà) et
   ajoute une paire clé/valeur de votre choix en haut niveau.
  </para>
  <warning>
   <para>
    Elle ne peut être utilisée pour ajouter d'autres critères pour une
    requête à la volée. Actuellement, ceci <emphasis>ne fonctionne pas</emphasis> :
    <programlisting role="php">
<![CDATA[
<?php

// INCORRECT !
$cursor = $users->find()->addOption("name", "joe")->addOption("age", 20);

?>
]]>
    </programlisting>
    Ceci <emphasis>ne permet pas</emphasis> de chercher un utilisateur
    nommé "joe" et dont l'âge vaut 20.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>key</parameter>
     </term>
     <listitem>
      <para>
       Le nom du champ à ajouter.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>value</parameter>
     </term>
     <listitem>
      <para>
       La valeur à ajouter.
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Retourne ce curseur.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoCursorException</classname>
   si ce curseur a commencé à être parcouru.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple de l'ajout d'un commentaire avec <function>MongoCursor::addOption</function></title>
   <para>
    MongoDB supporte des options spéciales à envoyer au serveur. Le shell utilise
    l'option <literal>_addSpecial</literal> pour envoyer un
    <literal>$comment</literal> au server. Ce commentaire sera affiché dans
    les logs de profilage (i.e. pour les requêtes lentes). Dans le driver PHP,
    vous utilisez la méthode <function>MongoCursor::addOption</function>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient;
$c = $m->demo->demo;
$cursor = $c->find();
$cursor->addOption('$comment', "Ce commentaire sera affiché dans les logs de profilage");

foreach ($cursor as $document) { /* vide */ }
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
{
    "op" : "query",
    "ns" : "demo.demo",
    "query" : {
        "$query" : {
             
        },
        "$comment" : "Ce commentaire sera affiché dans les logs de profilage"
    },
    "cursorid" : 168463566447,
    "ntoreturn" : 0,
    "ntoskip" : 0,
    "nscanned" : 101,
    "nscannedObjects" : 101,
    "keyUpdates" : 0,
    "numYield" : 0,
…
]]>
   </screen>
  </example>

  <example>
   <title>Exemple avec <function>MongoCursor::addOption</function></title>
   <para>
    L'utilisation de la méthode <function>MongoCursor::skip</function>
    pour éviter plusieurs millions de résultats peut être lent.
    Pour éviter de rencontrer ce problème, vous pouvez utiliser les options
    <literal>$min</literal> ou <literal>$max</literal> de votre requête.
    Ceci peut paraître simple mais encore faut-il un index sur le champ
    exact sur lequel on effectue la recherche. Voici un exemple d'utilisation
    de l'option <literal>$min</literal> comme alternative à la méthode
    <function>MongoCursor::skip</function>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// Assurons-nous que l'index est présent
$c->ensureIndex(array("ts" => 1));

// vous devriez modifier ceci afin que l'exécution s'effectue en un
// temps raisonnable sur des machines lentes (prend environ 30 secondes
// sur une bonne machine)
for ($i = 0; $i < 30000000; $i++) {
    $c->insert(array("ts" => new MongoDate(), "i" => $i));
}

$now = strtotime("now");

// Trouve les documents insérés dans les 2 dernières secondes
$cursor = $c->find()->addOption('$min', array("ts" => $now-2));

?>
]]>
   </programlisting>
  </example>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
