<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: jpauli Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.quickhashinthash" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>La classe QuickHashIntHash</title>
 <titleabbrev>QuickHashIntHash</titleabbrev>
 
 <partintro>
  
  <!-- {{{ QuickHashIntHash intro -->
  <section xml:id="quickhashinthash.intro">
   &reftitle.intro;
   <para>
    Cette classe est un conteneur pour un hash contenant des nombres entiers,
    alors que les valeurs sont elles aussi des entiers. Les hash sont aussi
    disponibles au travers de l'interface ArrayAccess.
   </para>
   <para>
    Les hash peuvent aussi être parcourus via l'interface Iterator. L'ordre dans
    lequel les éléments ressortent n'est pas garanti.
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="quickhashinthash.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>QuickHashIntHash</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>QuickHashIntHash</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">Constantes</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashinthash.constants.check-for-dupes">QuickHashIntHash::CHECK_FOR_DUPES</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashinthash.constants.do-not-use-zend-alloc">QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashinthash.constants.hasher-no-hash">QuickHashIntHash::HASHER_NO_HASH</varname>
     <initializer>256</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashinthash.constants.hasher-jenkins1">QuickHashIntHash::HASHER_JENKINS1</varname>
     <initializer>512</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="quickhashinthash.constants.hasher-jenkins2">QuickHashIntHash::HASHER_JENKINS2</varname>
     <initializer>1024</initializer>
    </fieldsynopsis>
    
    <classsynopsisinfo role="comment">Méthodes</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.quickhashinthash')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  <!-- {{{ QuickHashIntHash constants -->
  <section xml:id="quickhashinthash.constants">
   &reftitle.constants;
   <variablelist>
    
    <varlistentry xml:id="quickhashinthash.constants.check-for-dupes">
     <term><constant>QuickHashIntHash::CHECK_FOR_DUPES</constant></term>
     <listitem>
      <para>Si activé, l'ajout d'éléments déja existants dans l'ensemble (via
       add() ou loadFromFile()) fera que ces éléments seront supprimés de
       l'ensemble. Ceci prendra du temps, utilisez uniquement lorsque nécessaire.
      </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashinthash.constants.do-not-use-zend-alloc">
     <term><constant>QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC</constant></term>
     <listitem>
      <para>Désactive l'utilisation du gestionnaire de mémoire interne à PHP. Si cette
       option est activée, les allocations internes ne compteront pas dans le
       paramètre memory_limit.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashinthash.constants.hasher-no-hash">
     <term><constant>QuickHashIntHash::HASHER_NO_HASH</constant></term>
     <listitem>
      <para>Utilise un modulo et non pas une fonction de hachage pour trouver un élément
       dans l'index. Ce n'est pas plus rapide que le hachage classique, et le risque
       de collision est plus élevé.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashinthash.constants.hasher-jenkins1">
     <term><constant>QuickHashIntHash::HASHER_JENKINS1</constant></term>
     <listitem>
      <para>Fonction de hachage par défaut qui transforme les hash entiers en
       éléments indexés en liste.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashinthash.constants.hasher-jenkins2">
     <term><constant>QuickHashIntHash::HASHER_JENKINS2</constant></term>
     <listitem>
      <para>Sélectionne un algorithme de hachage différent.</para>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </section>
  <!-- }}} -->
  
  
 </partintro>
 
 &reference.quickhash.entities.quickhashinthash;
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
